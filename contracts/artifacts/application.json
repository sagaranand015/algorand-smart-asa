{
    "hints": {
        "get_emission_rule": {
            "structs": {
                "output": {
                    "name": "EmissionRuleResult",
                    "elements": [
                        [
                            "emission",
                            "string"
                        ],
                        [
                            "max",
                            "uint64"
                        ],
                        [
                            "min",
                            "uint64"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDcKaW50Y2Jsb2NrIDAgMSA0CmJ5dGVjYmxvY2sgMHgxNTFmN2M3NSAweDY1NmQ2OTczNzM2OTZmNmU1ZjcwNjE3MjYxNmQ2NTc0NjU3MiAweDY1NmQ2OTczNzM2OTZmNmU1ZjZkNjE3OCAweDY1NmQ2OTczNzM2OTZmNmU1ZjZkNjk2ZSAweDAwIDB4CnR4biBOdW1BcHBBcmdzCmludGNfMCAvLyAwCj09CmJueiBtYWluX2wxMgp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDc0YjkwMzhkIC8vICJnZXRfZW1pc3Npb25fcnVsZSgpKHN0cmluZyx1aW50NjQsdWludDY0KSIKPT0KYm56IG1haW5fbDExCnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4MGVmOWU2NTIgLy8gInNldF9lbWlzc2lvbl9ydWxlKHN0cmluZyx1aW50NjQsdWludDY0KWJvb2wiCj09CmJueiBtYWluX2wxMAp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDE3OTQ0ZGI2IC8vICJpc19idXNpbmVzc19jb21wbGlhbnQoc3RyaW5nLHVpbnQ2NClib29sIgo9PQpibnogbWFpbl9sOQp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDlmOTg1ZmM0IC8vICJjcmVhdGVfY29tcGxpYW5jZV9uZnQoKXVpbnQ2NCIKPT0KYm56IG1haW5fbDgKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHhiNjBjYjQ5NCAvLyAiYWxsb2NhdGVfY29tcGxpYW5jZV9uZnRfdG9fYnVzaW5lc3MoYWRkcmVzcyx1aW50NjQpdWludDY0Igo9PQpibnogbWFpbl9sNwplcnIKbWFpbl9sNzoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQpzdG9yZSAyMAp0eG5hIEFwcGxpY2F0aW9uQXJncyAyCmJ0b2kKc3RvcmUgMjEKbG9hZCAyMApsb2FkIDIxCmNhbGxzdWIgYWxsb2NhdGVjb21wbGlhbmNlbmZ0dG9idXNpbmVzc18xMQpzdG9yZSAyMgpieXRlY18wIC8vIDB4MTUxZjdjNzUKbG9hZCAyMgppdG9iCmNvbmNhdApsb2cKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDg6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgY3JlYXRlY29tcGxpYW5jZW5mdF8xMApzdG9yZSAxOApieXRlY18wIC8vIDB4MTUxZjdjNzUKbG9hZCAxOAppdG9iCmNvbmNhdApsb2cKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDk6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CnR4bmEgQXBwbGljYXRpb25BcmdzIDEKc3RvcmUgMTIKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgpidG9pCnN0b3JlIDEzCmxvYWQgMTIKbG9hZCAxMwpjYWxsc3ViIGlzYnVzaW5lc3Njb21wbGlhbnRfNgpzdG9yZSAxNApieXRlY18wIC8vIDB4MTUxZjdjNzUKYnl0ZWMgNCAvLyAweDAwCmludGNfMCAvLyAwCmxvYWQgMTQKc2V0Yml0CmNvbmNhdApsb2cKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDEwOgp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCnN0b3JlIDUKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgpidG9pCnN0b3JlIDYKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwpidG9pCnN0b3JlIDcKbG9hZCA1CmxvYWQgNgpsb2FkIDcKY2FsbHN1YiBzZXRlbWlzc2lvbnJ1bGVfNQpzdG9yZSA4CmJ5dGVjXzAgLy8gMHgxNTFmN2M3NQpieXRlYyA0IC8vIDB4MDAKaW50Y18wIC8vIDAKbG9hZCA4CnNldGJpdApjb25jYXQKbG9nCmludGNfMSAvLyAxCnJldHVybgptYWluX2wxMToKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiBnZXRlbWlzc2lvbnJ1bGVfNApzdG9yZSAwCmJ5dGVjXzAgLy8gMHgxNTFmN2M3NQpsb2FkIDAKY29uY2F0CmxvZwppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMTI6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KYm56IG1haW5fbDE4CnR4biBPbkNvbXBsZXRpb24KaW50Y18xIC8vIE9wdEluCj09CmJueiBtYWluX2wxNwp0eG4gT25Db21wbGV0aW9uCmludGNfMiAvLyBVcGRhdGVBcHBsaWNhdGlvbgo9PQpibnogbWFpbl9sMTYKZXJyCm1haW5fbDE2Ogp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQphc3NlcnQKY2FsbHN1YiB1cGRhdGVfMgppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMTc6CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CmFzc2VydApjYWxsc3ViIG9wdGluXzMKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDE4Ogp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAo9PQphc3NlcnQKY2FsbHN1YiBjcmVhdGVfMAppbnRjXzEgLy8gMQpyZXR1cm4KCi8vIGNyZWF0ZQpjcmVhdGVfMDoKcHVzaGJ5dGVzIDB4NzI2NTY3NzU2YzYxNzQ2ZjcyIC8vICJyZWd1bGF0b3IiCmJ5dGVjIDUgLy8gIiIKYXBwX2dsb2JhbF9wdXQKYnl0ZWNfMSAvLyAiZW1pc3Npb25fcGFyYW1ldGVyIgpieXRlYyA1IC8vICIiCmFwcF9nbG9iYWxfcHV0CmJ5dGVjXzIgLy8gImVtaXNzaW9uX21heCIKaW50Y18wIC8vIDAKYXBwX2dsb2JhbF9wdXQKYnl0ZWNfMyAvLyAiZW1pc3Npb25fbWluIgppbnRjXzAgLy8gMAphcHBfZ2xvYmFsX3B1dApyZXRzdWIKCi8vIGF1dGhfb25seQphdXRob25seV8xOgpnbG9iYWwgQ3JlYXRvckFkZHJlc3MKPT0KcmV0c3ViCgovLyB1cGRhdGUKdXBkYXRlXzI6CnR4biBTZW5kZXIKY2FsbHN1YiBhdXRob25seV8xCi8vIHVuYXV0aG9yaXplZAphc3NlcnQKaW50Y18xIC8vIDEKcmV0dXJuCgovLyBvcHRfaW4Kb3B0aW5fMzoKaW50Y18xIC8vIDEKcmV0dXJuCgovLyBnZXRfZW1pc3Npb25fcnVsZQpnZXRlbWlzc2lvbnJ1bGVfNDoKYnl0ZWNfMiAvLyAiZW1pc3Npb25fbWF4IgphcHBfZ2xvYmFsX2dldApzdG9yZSAxCmJ5dGVjXzMgLy8gImVtaXNzaW9uX21pbiIKYXBwX2dsb2JhbF9nZXQKc3RvcmUgMgpieXRlY18xIC8vICJlbWlzc2lvbl9wYXJhbWV0ZXIiCmFwcF9nbG9iYWxfZ2V0CnN0b3JlIDMKbG9hZCAzCmxlbgppdG9iCmV4dHJhY3QgNiAwCmxvYWQgMwpjb25jYXQKc3RvcmUgMwpsb2FkIDMKc3RvcmUgNApwdXNoaW50IDE4IC8vIDE4Cml0b2IKZXh0cmFjdCA2IDAKbG9hZCAxCml0b2IKY29uY2F0CmxvYWQgMgppdG9iCmNvbmNhdApsb2FkIDQKY29uY2F0CnJldHN1YgoKLy8gc2V0X2VtaXNzaW9uX3J1bGUKc2V0ZW1pc3Npb25ydWxlXzU6CnN0b3JlIDExCnN0b3JlIDEwCnN0b3JlIDkKYnl0ZWNfMSAvLyAiZW1pc3Npb25fcGFyYW1ldGVyIgpsb2FkIDkKZXh0cmFjdCAyIDAKYXBwX2dsb2JhbF9wdXQKYnl0ZWNfMiAvLyAiZW1pc3Npb25fbWF4Igpsb2FkIDEwCmFwcF9nbG9iYWxfcHV0CmJ5dGVjXzMgLy8gImVtaXNzaW9uX21pbiIKbG9hZCAxMQphcHBfZ2xvYmFsX3B1dAppbnRjXzEgLy8gMQpyZXRzdWIKCi8vIGlzX2J1c2luZXNzX2NvbXBsaWFudAppc2J1c2luZXNzY29tcGxpYW50XzY6CnN0b3JlIDE2CnN0b3JlIDE1CmJ5dGVjXzEgLy8gImVtaXNzaW9uX3BhcmFtZXRlciIKYXBwX2dsb2JhbF9nZXQKbG9hZCAxNQpleHRyYWN0IDIgMAo9PQovLyBFbWlzc2lvbiBQYXJhbWV0ZXIgZ2l2ZW4gaXMgbm90IGNvcnJlY3QgZm9yIHRoZSBhcHAgYmVpbmcgdXNlZCEKYXNzZXJ0CmxvYWQgMTYKYnl0ZWNfMyAvLyAiZW1pc3Npb25fbWluIgphcHBfZ2xvYmFsX2dldAo+PQovLyBFbWlzc2lvbiB2YWx1ZSBpcyBsZXNzZXIgdGhhbiBtaW4gY29uZmlndXJlZAphc3NlcnQKbG9hZCAxNgpieXRlY18yIC8vICJlbWlzc2lvbl9tYXgiCmFwcF9nbG9iYWxfZ2V0Cjw9CmJueiBpc2J1c2luZXNzY29tcGxpYW50XzZfbDIKaW50Y18wIC8vIDAKc3RvcmUgMTcKYiBpc2J1c2luZXNzY29tcGxpYW50XzZfbDMKaXNidXNpbmVzc2NvbXBsaWFudF82X2wyOgppbnRjXzEgLy8gMQpzdG9yZSAxNwppc2J1c2luZXNzY29tcGxpYW50XzZfbDM6CmxvYWQgMTcKcmV0c3ViCgovLyBjcmVhdGVfY29tcGxpYW5jZV9uZnRfaW50ZXJuYWwKY3JlYXRlY29tcGxpYW5jZW5mdGludGVybmFsXzc6Cml0eG5fYmVnaW4KaW50Y18wIC8vIDAKaXR4bl9maWVsZCBGZWUKcHVzaGludCAzIC8vIGFjZmcKaXR4bl9maWVsZCBUeXBlRW51bQppbnRjXzEgLy8gMQppdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VG90YWwKaW50Y18wIC8vIDAKaXR4bl9maWVsZCBDb25maWdBc3NldERlY2ltYWxzCnB1c2hieXRlcyAweDQzNGY0ZDJkNDE1MzQxIC8vICJDT00tQVNBIgppdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VW5pdE5hbWUKcHVzaGJ5dGVzIDB4NDM0ZjRkNTA0YzQ5NDE0ZTQzNDUyZDQxNTM0MSAvLyAiQ09NUExJQU5DRS1BU0EiCml0eG5fZmllbGQgQ29uZmlnQXNzZXROYW1lCnB1c2hieXRlcyAweDY4NzQ3NDcwNzMzYTJmMmY2MzZmNmQ3MDZjNjk2MTZlNjM2NTJlNjE3MDcwMmYgLy8gImh0dHBzOi8vY29tcGxpYW5jZS5hcHAvIgppdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VVJMCmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCml0eG5fZmllbGQgQ29uZmlnQXNzZXRNYW5hZ2VyCmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCml0eG5fZmllbGQgQ29uZmlnQXNzZXRSZXNlcnZlCmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCml0eG5fZmllbGQgQ29uZmlnQXNzZXRGcmVlemUKZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKaXR4bl9maWVsZCBDb25maWdBc3NldENsYXdiYWNrCml0eG5fc3VibWl0Cml0eG4gQ3JlYXRlZEFzc2V0SUQKcmV0c3ViCgovLyBhcHBfb3B0X2ludG9fYXNzZXQKYXBwb3B0aW50b2Fzc2V0Xzg6CnN0b3JlIDI0Cml0eG5fYmVnaW4KaW50Y18wIC8vIDAKaXR4bl9maWVsZCBGZWUKaW50Y18yIC8vIGF4ZmVyCml0eG5fZmllbGQgVHlwZUVudW0KbG9hZCAyNAppdHhuX2ZpZWxkIFhmZXJBc3NldAppbnRjXzEgLy8gMQppdHhuX2ZpZWxkIEFzc2V0QW1vdW50Cmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCml0eG5fZmllbGQgU2VuZGVyCmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCml0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgppdHhuX3N1Ym1pdApyZXRzdWIKCi8vIHRyYW5zZmVyX2NvbXBsaWFuY2VfbmZ0X3RvX2J1c2luZXNzCnRyYW5zZmVyY29tcGxpYW5jZW5mdHRvYnVzaW5lc3NfOToKc3RvcmUgMjYKc3RvcmUgMjUKaXR4bl9iZWdpbgppbnRjXzAgLy8gMAppdHhuX2ZpZWxkIEZlZQppbnRjXzIgLy8gYXhmZXIKaXR4bl9maWVsZCBUeXBlRW51bQpsb2FkIDI2Cml0eG5fZmllbGQgWGZlckFzc2V0CmludGNfMSAvLyAxCml0eG5fZmllbGQgQXNzZXRBbW91bnQKZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKaXR4bl9maWVsZCBTZW5kZXIKbG9hZCAyNQppdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKaXR4bl9zdWJtaXQKcmV0c3ViCgovLyBjcmVhdGVfY29tcGxpYW5jZV9uZnQKY3JlYXRlY29tcGxpYW5jZW5mdF8xMDoKY2FsbHN1YiBjcmVhdGVjb21wbGlhbmNlbmZ0aW50ZXJuYWxfNwpzdG9yZSAxOQpsb2FkIDE5CmNhbGxzdWIgYXBwb3B0aW50b2Fzc2V0XzgKbG9hZCAxOQpyZXRzdWIKCi8vIGFsbG9jYXRlX2NvbXBsaWFuY2VfbmZ0X3RvX2J1c2luZXNzCmFsbG9jYXRlY29tcGxpYW5jZW5mdHRvYnVzaW5lc3NfMTE6CnN0b3JlIDIzCmxvYWQgMjMKY2FsbHN1YiB0cmFuc2ZlcmNvbXBsaWFuY2VuZnR0b2J1c2luZXNzXzkKbG9hZCAyMwpyZXRzdWI=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDcKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    },
    "schema": {
        "local": {
            "declared": {},
            "reserved": {}
        },
        "global": {
            "declared": {
                "regulator": {
                    "type": "bytes",
                    "key": "regulator",
                    "descr": "Regulator acting as the owner of the Emission Control"
                },
                "emission_parameter": {
                    "type": "bytes",
                    "key": "emission_parameter",
                    "descr": "Emission Parameter to keep track of"
                },
                "emission_max": {
                    "type": "uint64",
                    "key": "emission_max",
                    "descr": "Max value of the emission control parameter"
                },
                "emission_min": {
                    "type": "uint64",
                    "key": "emission_min",
                    "descr": "Min value of the emission control parameter"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "EmissionControl",
        "methods": [
            {
                "name": "get_emission_rule",
                "args": [],
                "returns": {
                    "type": "(string,uint64,uint64)"
                },
                "desc": "Returns the rules defined by the regulator for the given emission SC"
            },
            {
                "name": "set_emission_rule",
                "args": [
                    {
                        "type": "string",
                        "name": "emission_parameter"
                    },
                    {
                        "type": "uint64",
                        "name": "emission_max"
                    },
                    {
                        "type": "uint64",
                        "name": "emission_min"
                    }
                ],
                "returns": {
                    "type": "bool"
                },
                "desc": "Sets the rules defined by the regulator for the given emission"
            },
            {
                "name": "is_business_compliant",
                "args": [
                    {
                        "type": "string",
                        "name": "emission_parameter"
                    },
                    {
                        "type": "uint64",
                        "name": "emission_value"
                    }
                ],
                "returns": {
                    "type": "bool"
                },
                "desc": "Returns true/false based on whether the business is compliant to the emissions value or not"
            },
            {
                "name": "create_compliance_nft",
                "args": [],
                "returns": {
                    "type": "uint64"
                },
                "desc": "Creates the compliance NFT for the business via the Algorand SC"
            },
            {
                "name": "allocate_compliance_nft_to_business",
                "args": [
                    {
                        "type": "address",
                        "name": "business_address"
                    },
                    {
                        "type": "uint64",
                        "name": "asset_id"
                    }
                ],
                "returns": {
                    "type": "uint64"
                },
                "desc": "Creates the compliance NFT for the business via the Algorand SC"
            }
        ],
        "networks": {},
        "desc": "\n    Emission Control(aka Smart Contract App) for storing business' compliance analysis on chain\n    and creating/minting NFTs for businesses based on the rules defined by the regulators.\n    "
    }
}